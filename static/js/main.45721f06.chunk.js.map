{"version":3,"sources":["images/image.png","Question.js","api/endpoints.js","CurrentQuestion.js","QuestionList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","question","className","id","text","scope","state","choices","map","choice","index","key","correct_answer","answers","concat","sort","a","b","created_at","answer","user","apiCurrentQuestion","fetch","headers","status","json","response","result","Error","console","log","JSON","stringify","apiGetQuestions","apiSetQuestionState","questionId","method","body","question_id","CurrentQuestion","props","useState","currentQuestion","setCurrentQuestion","loader","setLoader","setTimeout","newState","updateQuestions","useEffect","interval","setInterval","getCurrentQuestion","clearInterval","onClick","changeState","href","role","QuestionList","alert","questions","data-toggle","data-target","aria-expanded","aria-controls","type","aria-labelledby","data-parent","App","setQuestions","getQuestions","src","logo","alt","name","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"mGAAAA,EAAOC,QAAU,IAA0B,mC,wMCqE5BC,G,MAnEE,SAAC,GAAD,IAAEC,EAAF,EAAEA,SAAF,OACb,yBAAKC,UAAU,QACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,cAAcD,EAASE,GAArC,KAA2CF,EAASG,MACpD,uBAAGF,UAAU,aACT,2BAAOA,UAAU,SACb,+BACA,4BACI,wBAAIG,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,UAGJ,+BAECJ,EAASK,OACN,4BACI,wBAAID,MAAM,OAAV,SACA,4BAAKJ,EAASK,QAIrBL,EAASM,SACN,4BACI,wBAAIF,MAAM,OAAV,WACA,4BACMJ,EAASM,QAAQC,KAAI,SAACC,EAAQC,GAAT,OAAoB,yBAAKC,IAAKD,GAAQD,QAKxER,EAASW,gBACN,4BACI,wBAAIP,MAAM,OAAV,kBACA,4BAAKJ,EAASW,oBAOzBX,EAASY,SACN,6BACI,wBAAIX,UAAU,cAAd,YACA,uBAAGA,UAAU,aACT,2BAAOA,UAAU,kCACb,+BACA,4BACI,wBAAIG,MAAM,OAAV,QACA,wBAAIA,MAAM,OAAV,YAGJ,+BAEC,GAAGS,OAAOb,EAASY,SAASE,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEE,WAAaD,EAAEC,YAAe,EAAI,KAAGV,KAAI,SAACW,EAAQT,GAAT,OACpF,wBAAIC,IAAKD,GACL,wBAAIL,MAAM,OAAOc,EAAOC,MACxB,4BAAKD,EAAOA,oBC1D7C,SAAeE,IAAtB,+B,4CAAO,8BAAAL,EAAA,+EAG4BM,MAAM,gDAAiD,CAC1EC,QAAS,CACL,SAAU,SACV,eAAgB,sBAN7B,UAU6B,OAPlBtB,EAHX,QAUkBuB,OAVlB,gCAW8BvB,EAASwB,OAXvC,cAWaC,EAXb,yBAYgBA,EAASC,QAZzB,mBAcWC,MAdX,sBAc2B3B,EAd3B,gBAc8CA,EAASwB,OAdvD,kHAgBKI,QAAQC,IAAIC,KAAKC,UAAL,OAhBjB,gE,sBAqBA,SAAeC,IAAtB,+B,4CAAO,8BAAAjB,EAAA,+EAG4BM,MAAM,uDAAwD,CACjFC,QAAS,CACL,SAAU,SACV,eAAgB,sBAN7B,UAU6B,OAPlBtB,EAHX,QAUkBuB,OAVlB,iCAW8BvB,EAASwB,OAXvC,cAWaC,EAXb,OAYSG,QAAQC,IAAI,oBAAsBC,KAAKC,UAAUN,EAASC,SAZnE,kBAagBD,EAASC,QAbzB,oBAeWC,MAfX,sBAe2B3B,EAf3B,gBAe8CA,EAASwB,OAfvD,kHAiBKI,QAAQC,IAAIC,KAAKC,UAAL,OAjBjB,gE,sBAuBA,SAAeE,EAAtB,oC,4CAAO,WAAmCC,EAAY7B,GAA/C,eAAAU,EAAA,+EAGsBM,MAAM,yDAA0D,CACjFC,QAAS,CACL,SAAU,SACV,eAAgB,oBAEpBa,OAAQ,OACRC,KAAMN,KAAKC,UAAU,CACjB1B,MAAOA,EACPgC,YAAaH,MAXtB,UAeuB,OAZhBR,EAHP,QAeYH,OAfZ,6BAgBWI,MAhBX,mCAgBwCG,KAAKC,UAAUL,GAhBvD,WAgBmEI,KAhBnE,UAgBwFJ,EAAOF,OAhB/F,oCAgBwEO,UAhBxE,+EAkBCH,QAAQC,IAAI,4BAA8BK,EAAa,WAAa7B,GAlBrE,mBAmBQ,GAnBR,wCAqBCuB,QAAQC,IAAIC,KAAKC,UAAL,OArBb,gE,sBCxCP,IAsDeO,EAtDS,SAACC,GAAW,IAAD,EAEeC,mBAAS,IAFxB,mBAExBC,EAFwB,KAEPC,EAFO,OAGHF,oBAAS,GAHN,mBAGxBG,EAHwB,KAGhBC,EAHgB,iDAK/B,sBAAA7B,EAAA,6DACI6B,GAAU,GADd,KAEIF,EAFJ,SAE6BtB,IAF7B,kCAGIyB,YAAW,kBAAMD,GAAU,KAAQ,KAHvC,4CAL+B,kEAW/B,WAA2BE,GAA3B,SAAA/B,EAAA,sEACUkB,EAAoBQ,EAAgBvC,GAAI4C,GADlD,OAEIP,EAAMQ,kBAFV,4CAX+B,sBAwB/B,OARAC,qBAAU,WACN,IAAMC,EAAWC,aAAY,YAjBF,mCAkBvBC,KACD,KACH,OAAO,kBAAMC,cAAcH,MAC5B,IAGqB,OAApBR,EAEI,yBAAKxC,UAAU,8BACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACV0C,GAAU,0BAAM1C,UAAU,WAAhB,UACX,sDAOhB,yBAAKA,UAAU,8BACX,yBAAKA,UAAU,UACX,yBAAKA,UAAU,aACV0C,GAAU,0BAAM1C,UAAU,WAAhB,UACX,yBAAKA,UAAU,aACX,wBAAIA,UAAU,aAAd,oBACA,2BACI,kBAAC,EAAD,CAAUD,SAAUyC,KAExB,2BAAG,4BAAQY,QAAS,kBA9CT,2CA8CeC,CAAY,WAAWrD,UAAU,wBAAwBsD,KAAK,IAAIC,KAAK,UAA9F,wBCSZC,EAvDM,SAAClB,GAAW,SAEde,EAFa,gFAE5B,WAA2BpB,EAAYY,GAAvC,SAAA/B,EAAA,sEACckB,EAAoBC,EAAYY,GAD9C,kCAEQP,EAAMQ,kBAFd,sBAKQW,MAAM,kBAAoBxB,GALlC,4CAF4B,sBAW5B,OACI,yBAAKjC,UAAU,8BACX,yBAAKA,UAAU,kBAAkBC,GAAG,aAC/B,GAAGW,OAAO0B,EAAMoB,WAAW7C,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEV,MAAQW,EAAEX,OAAcU,EAAEV,QAAUW,EAAEX,OAAWU,EAAEb,GAAKc,EAAEd,GAAvC,GAAwD,KAAIK,KAAI,SAAAP,GAAQ,OACrI,yBAAKU,IAAKV,EAASE,GAAID,UAAU,QAC7B,yBAAKA,UAAU,cAAcC,GAAG,cAC5B,yBAAKD,UAAU,OACX,yBAAKA,UAAU,SACX,wBAAIA,UAAU,QACV,4BAAQA,UAAU,eAAe2D,cAAY,WAAWC,cAAa,YAAc7D,EAASE,GACpF4D,gBAAc,OAAOC,gBAAe,WAAa/D,EAASE,IAC7DF,EAASE,GAFd,KAEoBF,EAASG,QAIrC,yBAAKF,UAAU,SACS,UAAnBD,EAASK,OACL,4BAASgD,QAAS,kBAAMC,EAAYtD,EAASE,GAAI,SAAU8D,KAAK,SAAS/D,UAAU,mBAAnF,kBACe,WAAnBD,EAASK,OACL,6BACG,uBAAGkD,KAAK,qBAAqBtD,UAAU,iCAAvC,UACA,uBAAGsD,KAAK,qBAAqBF,QAAS,kBAAMC,EAAYtD,EAASE,GAAI,UAAUD,UAAU,uBAAzF,oBAEY,SAAnBD,EAASK,OACL,uBAAGkD,KAAK,qBAAqBtD,UAAU,+BAAvC,WAKjB,yBAAKC,GAAI,WAAaF,EAASE,GAAID,UAAU,WAAWgE,kBAAgB,aAAaC,cAAY,cAC7F,yBAAKjE,UAAU,aACX,kBAAC,EAAD,CAAUD,SAAUA,IACpB,yBAAKC,UAAU,cACX,uBAAGsD,KAAK,YAAR,uBCfrBY,MA1Bf,WAAgB,IAAD,EAEuB3B,mBAAS,IAFhC,mBAEJmB,EAFI,KAEOS,EAFP,cAIIC,IAJJ,2EAIX,sBAAAtD,EAAA,kEACIqD,EADJ,SACuBpC,IADvB,8EAJW,sBAYX,OAJAgB,qBAAU,WACNqB,MACD,IAGH,yBAAKpE,UAAU,OACb,4BAAQA,UAAU,cAChB,yBAAKqE,IAAKC,IAAMtE,UAAU,WAAWuE,IAAI,SACzC,+CAGF,uBAAGC,KAAK,YACR,kBAAC,EAAD,CAAiB1B,gBAAiBsB,IAClC,kBAAC,EAAD,CAActB,gBAAiBsB,EAAcV,UAAWA,MChB1Ce,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL/D,QAAQ+D,MAAMA,EAAMC,c","file":"static/js/main.45721f06.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.78baeaab.png\";","import React, { useState, useEffect } from 'react'\n\nconst Question = ({question}) => (\n    <div className=\"card\">\n        <div className=\"card-body\">\n            <h5 className=\"card-title\">{question.id}. {question.text}</h5>\n            <p className=\"card-text\">\n                <table className=\"table\">\n                    <thead>\n                    <tr>\n                        <th scope=\"col\">Field</th>\n                        <th scope=\"col\">Data</th>\n                    </tr>\n                    </thead>\n                    <tbody>\n\n                    {question.state && (\n                        <tr>\n                            <th scope=\"row\">State</th>\n                            <td>{question.state}</td>\n                        </tr>\n                    )}\n\n                    {question.choices && (\n                        <tr>\n                            <th scope=\"row\">Choices</th>\n                            <td>\n                                 {question.choices.map((choice, index) => (<div key={index}>{choice}</div>))}\n                            </td>\n                        </tr>\n                    )}\n\n                    {question.correct_answer && (\n                        <tr>\n                            <th scope=\"row\">Correct_answer</th>\n                            <td>{question.correct_answer}</td>\n                        </tr>\n                    )}\n                    </tbody>\n                </table>\n            </p>\n\n                {question.answers && (\n                    <div>\n                        <h5 className=\"card-title\">Answers:</h5>\n                        <p className=\"card-text\">\n                            <table className=\"table table-striped table-dark\">\n                                <thead>\n                                <tr>\n                                    <th scope=\"col\">User</th>\n                                    <th scope=\"col\">Answer</th>\n                                </tr>\n                                </thead>\n                                <tbody>\n\n                                {[].concat(question.answers).sort((a, b) => (a.created_at > b.created_at) ? -1 : 1).map((answer, index) => (\n                                    <tr key={index}>\n                                        <th scope=\"row\">{answer.user}</th>\n                                        <td>{answer.answer}</td>\n                                    </tr>\n                                ))}\n                                </tbody>\n                            </table>\n                        </p>\n                    </div>\n                )}\n        </div>\n    </div>\n)\nexport default Question","export async function apiCurrentQuestion()  {\n\n        try {\n            const question = await fetch(\"https://tinder.pirotech.space/storm/question/\", {\n                headers: {\n                    \"X-User\": \"SPARKY\",\n                    \"Content-Type\": \"application/json\"\n                },\n            });\n\n            if (question.status === 200) {\n                let response = await question.json();\n                return response.result;\n            }\n            throw Error(`Failed ${question}, ${await question.json()}`);\n        } catch (e) {\n            console.log(JSON.stringify(e));\n            throw e;\n        }\n}\n\nexport async function apiGetQuestions()  {\n\n        try {\n            const question = await fetch(\"https://tinder.pirotech.space/storm/question/control\", {\n                headers: {\n                    \"X-User\": \"SPARKY\",\n                    \"Content-Type\": \"application/json\"\n                },\n            });\n\n            if (question.status === 200) {\n                let response = await question.json();\n                console.log(\"Current question \" + JSON.stringify(response.result));\n                return response.result;\n            }\n            throw Error(`Failed ${question}, ${await question.json()}`);\n        } catch (e) {\n            console.log(JSON.stringify(e));\n            throw e;\n        }\n\n}\n\nexport async function apiSetQuestionState(questionId, state) {\n    try {\n        // @ts-ignore\n        const result = await fetch(\"https://tinder.pirotech.space/storm/question/set_state\", {\n            headers: {\n                \"X-User\": \"SPARKY\",\n                \"Content-Type\": \"application/json\"\n            },\n            method: \"POST\",\n            body: JSON.stringify({\n                state: state,\n                question_id: questionId\n            }),\n        });\n\n        if (result.status !== 200) {\n            throw Error(`Failed to set state ${JSON.stringify(result)}, ${JSON.stringify(await result.json())}`);\n        }\n        console.log(\"State changed. Question: \" + questionId + \" State: \" + state);\n        return true;\n    } catch (e) {\n        console.log(JSON.stringify(e));\n        throw e;\n    }\n}","import React, { useState, useEffect } from 'react'\nimport Question from \"./Question\";\nimport {apiCurrentQuestion, apiSetQuestionState} from \"./api/endpoints\";\n\nconst CurrentQuestion = (props) => {\n\n    const [currentQuestion, setCurrentQuestion] = useState({});\n    const [loader, setLoader] = useState(false);\n\n    async function getCurrentQuestion() {\n        setLoader(true);\n        setCurrentQuestion(await apiCurrentQuestion());\n        setTimeout(() => setLoader(false), 500);\n    }\n\n    async function changeState(newState) {\n        await apiSetQuestionState(currentQuestion.id, newState);\n        props.updateQuestions();\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            getCurrentQuestion()\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n\n    if (currentQuestion === null) {\n        return  (\n            <div className=\"row justify-content-center\">\n                <div className=\"col-11\">\n                    <div className=\"jumbotron\">\n                        {loader && <span className=\"checked\">synced</span>}\n                        <h2>No current question</h2>\n                    </div>\n                </div>\n            </div>)\n    }\n\n    return (\n        <div className=\"row justify-content-center\">\n            <div className=\"col-11\">\n                <div className=\"jumbotron\">\n                    {loader && <span className=\"checked\">synced</span>}\n                    <div className=\"container\">\n                        <h1 className=\"display-5\">Current question</h1>\n                        <p>\n                            <Question question={currentQuestion}/>\n                        </p>\n                        <p><button onClick={() => changeState('closed')} className=\"btn btn-danger btn-lg\" href=\"#\" role=\"button\">Close question</button></p>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default CurrentQuestion","import React from 'react'\nimport Question from \"./Question\";\nimport {apiSetQuestionState} from \"./api/endpoints\";\n\nconst QuestionList = (props) => {\n\n    async function changeState(questionId, newState) {\n        if (await apiSetQuestionState(questionId, newState)) {\n            props.updateQuestions();\n        }\n        else {\n            alert(\"Failed to open \" + questionId);\n        }\n    }\n\n    return (\n        <div className=\"row justify-content-center\">\n            <div className=\"col-11 col-md-7\" id=\"accordion\">\n                {[].concat(props.questions).sort((a, b) => (a.state < b.state) ? 1 : (a.state === b.state) ? ((a.id > b.id) ? 1 : -1) : -1 ).map(question => (\n                    <div key={question.id} className=\"card\">\n                        <div className=\"card-header\" id=\"headingOne\">\n                            <div className=\"row\">\n                                <div className=\"col-8\">\n                                    <h5 className=\"mb-0\">\n                                        <button className=\"btn btn-link\" data-toggle=\"collapse\" data-target={\"#question\" + question.id}\n                                                aria-expanded=\"true\" aria-controls={\"question\" + question.id}>\n                                            {question.id}. {question.text}\n                                        </button>\n                                    </h5>\n                                </div>\n                                <div className=\"col-4\">\n                                    {question.state === 'ready' &&\n                                        (<button  onClick={() => changeState(question.id, 'open')}  type=\"button\" className=\"btn btn-success\">Start question</button>)}\n                                    {question.state === 'closed' &&\n                                        (<div>\n                                            <a href=\"javascript:void(0)\" className=\"badge badge-danger no-pointer\">Closed</a>\n                                            <a href=\"javascript:void(0)\" onClick={() => changeState(question.id, 'ready')} className=\"badge badge-warning\">set ready again</a>\n                                        </div>)}\n                                    {question.state === 'open' &&\n                                        (<a href=\"javascript:void(0)\" className=\"badge badge-info no-pointer\">Open</a>)}\n                                </div>\n                            </div>\n                        </div>\n\n                        <div id={\"question\" + question.id} className=\"collapse\" aria-labelledby=\"headingOne\" data-parent=\"#accordion\">\n                            <div className=\"card-body\">\n                                <Question question={question}/>\n                                <div className=\"text-right\">\n                                    <a href=\"#current\">scroll up</a>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                ))}\n            </div>\n        </div>\n    )\n}\n\nexport default QuestionList","import React, {useEffect, useState} from 'react';\nimport logo from './images/image.png';\nimport './App.css';\nimport CurrentQuestion from \"./CurrentQuestion\";\nimport QuestionList from \"./QuestionList\";\nimport {apiGetQuestions} from \"./api/endpoints\";\n\nfunction App() {\n\n    const [questions, setQuestions] = useState([]);\n\n    async function getQuestions() {\n        setQuestions(await apiGetQuestions());\n    }\n\n    useEffect(() => {\n        getQuestions()\n    }, []);\n\n    return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>MxM Storm panel</p>\n      </header>\n\n      <a name=\"current\"></a>\n      <CurrentQuestion updateQuestions={getQuestions}/>\n      <QuestionList updateQuestions={getQuestions} questions={questions} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}