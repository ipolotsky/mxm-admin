{"version":3,"sources":["images/image.png","Question.js","api/endpoints.js","CurrentQuestion.js","QuestionList.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Question","question","className","id","text","state","choices","JSON","stringify","correct_answer","answers","apiCurrentQuestion","a","dummyQuestion","result","apiGetQuestions","dummyQuestions","apiSetQuestionState","questionId","console","log","CurrentQuestion","useState","currentQuestion","setCurrentQuestion","loader","setLoader","setTimeout","changeState","newState","useEffect","interval","setInterval","getCurrentQuestion","clearInterval","onClick","QuestionList","questions","setQuestions","alert","getQuestions","map","key","openQuestion","App","src","logo","alt","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.4d2f10f6.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/image.78baeaab.png\";","import React, { useState, useEffect } from 'react'\n\nconst Question = ({question}) => (\n    <div className=\"question-content\">\n        <p>Id: {question.id}</p>\n        <p>Question: {question.text}</p>\n        {question.state && (<p>State: {question.state}</p>)}\n        {question.choices && (<p>Choices: {JSON.stringify(question.choices)}</p>)}\n        {question.correct_answer && (<p>Correct answer: {question.correct_answer}</p>)}\n        {question.answers && (\n            <p><br/>Answers: {JSON.stringify(question.answers)}</p>)}\n    </div>)\nexport default Question","export async function apiCurrentQuestion()  {\n    /*\n        try {\n            const question = await fetch(\"https://tinder.pirotech.space/storm/question/\", {\n                headers: {\n                    \"X-User\": \"SPARKY\"\n                },\n            });\n\n            if (question.status === 200) {\n                let response = await question.json();\n                console.log(\"Current question \" + JSON.stringify(response.result));\n                alert(JSON.stringify(response.result));\n                return response;\n            }\n            throw Error(`Failed ${question}, ${await question.json()}`);\n        } catch (e) {\n            console.log(JSON.stringify(e));\n            throw e;\n        }\n         */\n\n    let dummyNoQuestion = {\"status\": \"ok\", \"result\": null};\n    let dummyQuestion = {\"status\": \"ok\", \"result\": {\"id\": 1, \"text\": \"What is correct answer?\", \"image\": null, \"choices\": [\"correct\", \"incorrect\"]}}\n\n    return dummyQuestion.result;\n}\n\nexport async function apiGetQuestions()  {\n    /*\n        try {\n            const question = await fetch(\"https://tinder.pirotech.space/storm/question/control\", {\n                headers: {\n                    \"X-User\": \"SPARKY\"\n                },\n            });\n\n            if (question.status === 200) {\n                let response = await question.json();\n                console.log(\"Current question \" + JSON.stringify(response.result));\n                alert(JSON.stringify(response.result));\n                return response;\n            }\n            throw Error(`Failed ${question}, ${await question.json()}`);\n        } catch (e) {\n            console.log(JSON.stringify(e));\n            throw e;\n        }\n         */\n\n    let dummyNoQuestions = {\"status\": \"ok\", \"result\": []}\n    let dummyQuestions = {\"status\": \"ok\", \"result\": [{\"id\": 1, \"state\": \"open\", \"text\": \"What is correct answer?\", \"image\": null, \"choices\": [\"correct\", \"incorrect\"], \"correct_answer\": \"correct\", \"answers\": []}, {\"id\": 2, \"state\": \"closed\", \"text\": \"Another question\", \"image\": null, \"choices\": [\"aaaaaa\", \"bbbbbb\", \"ccccccc\", \"dddddddd\"], \"correct_answer\": \"aaaaaa\", \"answers\": []}, {\"id\": 3, \"state\": \"closed\", \"text\": \"Third onw\", \"image\": null, \"choices\": [\"qwer\", \"qwerty\", \"asdf\", \"asdfgh\"], \"correct_answer\": \"qwerty\", \"answers\": []}]}\n    return dummyQuestions.result\n}\n\nexport async function apiSetQuestionState(questionId, state) {\n\n/*    try {\n        // @ts-ignore\n        const result = await fetch(\"https://tinder.pirotech.space/storm/question/set_state\", {\n            headers: {\n                \"X-User\": \"SPARKY\",\n            },\n            method: \"POST\",\n            body: JSON.stringify({\n                state: state,\n                question_id: questionId\n            }),\n        });\n\n        if (result.status !== 200) {\n            throw Error(`Failed to set state ${JSON.stringify(result)}, ${JSON.stringify(await result.json())}`);\n        }\n        return true;\n    } catch (e) {\n        console.log(JSON.stringify(e));\n        throw e;\n    }\n\n */\n    console.log(\"State changed. Question: \" + questionId + \" State: \" + state);\n    return true;\n}","import React, { useState, useEffect } from 'react'\nimport Question from \"./Question\";\nimport {apiCurrentQuestion, apiSetQuestionState} from \"./api/endpoints\";\n\nconst CurrentQuestion = () => {\n\n    const [currentQuestion, setCurrentQuestion] = useState({});\n    const [loader, setLoader] = useState(false);\n\n    async function getCurrentQuestion() {\n        setLoader(true);\n        setCurrentQuestion(await apiCurrentQuestion());\n        setTimeout(() => setLoader(false), 500);\n    }\n\n    async function changeNextState() {\n        let newState = currentQuestion.state === 'open' ? 'openToAnswer' : 'closed';\n        await apiSetQuestionState(currentQuestion.id, newState);\n    }\n\n    async function changeState(newState) {\n        await apiSetQuestionState(currentQuestion.id, newState);\n    }\n\n    useEffect(() => {\n        const interval = setInterval(() => {\n            getCurrentQuestion()\n        }, 1000);\n        return () => clearInterval(interval);\n    }, []);\n\n\n    if (currentQuestion === null) {\n        return  (\n            <div className=\"current-question\">\n                {loader && <span className=\"checked\">checked</span>}\n                <h2>No current question</h2>\n            </div>)\n    }\n\n    return (\n        <div className=\"current-question\">\n            {loader && <span className=\"checked\">checked</span>}\n            <h2>Current question:</h2>\n            <Question question={currentQuestion}/>\n\n            {/*ВОТ ТАК НАДО, ЖДЕМ, КОГДА БУДЕТ ПОЛЕ STATE ПРИХОДИТЬ ОТ СЕРВЕРА*/}\n            {/*<button onClick={ changeNextState } className=\"start-in-list\">*/}\n            {/*    {currentQuestion.state === 'open' && (<span>Request answers</span>)}*/}\n            {/*    {currentQuestion.state === 'openToAnswer' && (<span>Stop requesting answers. Close.</span>)}*/}\n            {/*</button>*/}\n\n            {/*ВОТ ТАК НЕ НАДО*/}\n            <button onClick={() => changeState('openToAnswer')} className=\"start-in-list\">Request answers</button>\n            <button onClick={() => changeState('closed')} className=\"start-in-list closed\">Close question</button>\n        </div>)\n}\n\nexport default CurrentQuestion","import React, { useState, useEffect } from 'react'\nimport Question from \"./Question\";\nimport {apiGetQuestions, apiSetQuestionState} from \"./api/endpoints\";\n\nconst QuestionList = () => {\n    const [questions, setQuestions] = useState([]);\n\n    async function getQuestions() {\n        setQuestions(await apiGetQuestions());\n    }\n\n    async function openQuestion(questionId) {\n        if (await apiSetQuestionState(questionId, 'open')) {\n            setQuestions(await apiGetQuestions());\n        }\n        else {\n            alert(\"Failed to open \" + questionId);\n        }\n    }\n\n    useEffect(() => {\n        getQuestions()\n    }, []);\n\n    return (\n        <div>\n            {questions.map(question => (\n                <div key={question.id} className=\"question-in-list\">\n                    <Question question={question}/>\n                    {question.state === 'closed' &&\n                        (<button onClick={() => openQuestion(question.id)} className=\"start-in-list\">Show question</button>)}\n                </div>\n            ))}\n        </div>\n        )\n}\n\nexport default QuestionList","import React from 'react';\nimport logo from './images/image.png';\nimport './App.css';\nimport CurrentQuestion from \"./CurrentQuestion\";\nimport QuestionList from \"./QuestionList\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>MxM Storm panel</p>\n\n        <CurrentQuestion/>\n\n        <h3>Questions:</h3>\n        <QuestionList/>\n\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}